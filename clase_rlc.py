# -*- coding: utf-8 -*-
"""CLASE_RLC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JXwojHOtZvUKX4zJEXCnMD5OlUcoYwcm

# **Circuito RLC sin fuente**
"""

!pip install sympy

"""# **Ejercicio 1**
### Hallar $v(t)$ para $t > 0$
"""

from sympy.interactive import printing
printing.init_printing(use_latex=True)
from sympy import *
import sympy as sp
import math 
##### Creación variable simbólica #####
t,C1,C2 = sp.symbols('t C1 C2')

v = sp.Function('v')

#####  Constantes  #####
R = 50 # [OHM]
C = 20*10**-6 # [F]
L = 0.4 # [H]

alpha = 1/(2*R*C)
omega = 1/math.sqrt(L*C)
print("alpha = ",alpha, " y omega = ",omega)
if alpha > omega:
  print("Movimiento sobre amortiguado")
elif alpha == omega:
  print("Movimiento criticamente amortiguado")
else:
  print("Movimiento sub-amortiguado")

##### Voltaje del circuito  #####
diffeq = Eq( v(t).diff(t,t)+ 1 / (R*C) * v(t).diff(t) + 1 / (L*C) * v(t), 0)

diffeq

#####  Condiciones Iniciales  #####
Vo = 25 # [V]
Io = -0.5 # [A]

dvo = -(Vo+R*Io)/(R*C)

#####  Se resuelve la ecuación diferencial  #####
y = sp.dsolve(sympify(diffeq),ics={v(0):Vo, v(t).diff(t).subs(t, 0): dvo}).rhs
y

#####  Se realiza la derivada de la solución  #####
yp = Derivative(y,t)
yp

#####  Se sustituyen las condiciones iniciales  #####
f1 = y.subs(t,0)-Vo
f2 = yp.subs(t,0) - dvo
C1,C2 = symbols("C1,C2")
Eqns = [sympify(f1),sympify(f2.evalf())]
#####  Se obtiene la solución final  #####
x = linsolve(Eqns,C1,C2)
A1 = x.args[0][0]
A2 = x.args[0][1]
y = y.subs([(C1,A1),(C2,A2)])
y

plot(sympify(y),(t,0,0.1),ylim=(0,30))

print("v(10ms) = %.4f [V]" % y.subs(t,10*10**-3) )

"""# **Ejercicio 2**
### Hallar $v(t)$ para $t > 0$
"""

from sympy.interactive import printing
printing.init_printing(use_latex=True)
from sympy import *
import sympy as sp
import math 
##### Creación variable simbólica #####
t,C1,C2 = sp.symbols('t C1 C2')

v = sp.Function('v')

#####  Constantes  #####
R = 20 # [OHM]
C = 4*10**-3 # [F]
L = 10 # [H]

alpha = 1/(2*R*C)
omega = 1/math.sqrt(L*C)
print("alpha = ",alpha, " y omega = ",omega)
if alpha > omega:
  print("Movimiento sobre amortiguado")
elif alpha == omega:
  print("Movimiento criticamente amortiguado")
else:
  print("Movimiento sub-amortiguado")

##### Voltaje del circuito  #####
diffeq = Eq( v(t).diff(t,t)+ 1 / (R*C) * v(t).diff(t) + 1 / (L*C) * v(t), 0)

diffeq

#####  Condiciones Iniciales  #####
Vo = 0 # [V]
Io = 4.5 # [A]

dvo = -(Vo+R*Io)/(R*C)

#####  Se resuelve la ecuación diferencial  #####
y = sp.dsolve(sympify(diffeq)).rhs
y

#####  Se realiza la derivada de la solución  #####
yp = Derivative(y,t).evalf()
yp

#####  Se sustituyen las condiciones iniciales  #####
f1 = y.subs(t,0)
f2 = yp.subs(t,0)
C1,C2 = symbols("C1,C2")
Eqns = [sympify(f1-Vo),sympify(f2.evalf()-dvo)]
#####  Se obtiene la solución final  #####
x = linsolve(Eqns,C1,C2)
A1 = x.args[0][0]
A2 = x.args[0][1]
y = y.subs([(C1,A1),(C2,A2)])
y

plot(sympify(y),(t,0,2),ylim=(-80,0))

"""Evaluando en la respuesta del circuito en t = 184.828 [ms] obtenemos"""

print("v(184.828m) = %.3f [V]" % y.subs(t,184.828*10**-3) )

"""# **Circuito RLC con fuente**

# **Ejercicio 1**
### Hallar $i(t)$ para $t > 0$
"""

from sympy.interactive import printing
printing.init_printing(use_latex=True)
from sympy import *
import sympy as sp
import math 
##### Creación variable simbólica #####
t,C1,C2 = sp.symbols('t C1 C2')

i = sp.Function('i')

#####  Constantes  #####
R = 10 # [OHM]
C = 8*10**-3 # [F]
L = 20 # [H]

#####  Fuente de entrada  #####
Ien = 4 #[A]
Iss = Ien

alpha = 1/(2*R*C)
omega = 1/math.sqrt(L*C)
print("alpha = ",alpha, " y omega = ",omega)
if alpha > omega:
  print("Movimiento sobre amortiguado")
elif alpha == omega:
  print("Movimiento criticamente amortiguado")
else:
  print("Movimiento sub-amortiguado")

##### Corriente del inductor  #####
diffeq = Eq( i(t).diff(t,t)+ 1 / (R*C) * i(t).diff(t) + 1 / (L*C) * i(t))

diffeq

#####  Condiciones Iniciales  #####
Vo = 15 # [V]
Io = 4 # [A]

dio = Vo/L

#####  Se resuelve la ecuación diferencial para la respuesta complementaria  #####
yc = sp.dsolve(sympify(diffeq)).rhs
yc

#####  Se realiza la derivada de la solución  #####
yp = Derivative(yc,t)
yp

#####  Se sustituyen las condiciones iniciales  #####
f1 = yc.subs(t,0)
f2 = yp.subs(t,0)
C1,C2 = symbols("C1,C2")
Eqns = [sympify( Iss + f1 - Io ),sympify(f2.evalf()-dio)]
#####  Se obtiene la solución final  #####
x = linsolve(Eqns,C1,C2)
A1 = x.args[0][0]
A2 = x.args[0][1]
yc = yc.subs([(C1,A1),(C2,A2)])
yf = Iss + yc
yf

plot(sympify(yf),(t,0,10),ylim=(3.9,4.1))

"""Evaluando en la respuesta del circuito en t = 273.280 [ms] obtenemos"""

print("iL(273.28m) = %.4f [A]" % yf.subs(t,273.28*10**-3) )

"""Evaluando en la respuesta del circuito en t = 2 [s] obtenemos"""

print("iL(2) = %.4f [A]" % yf.subs(t,2) )